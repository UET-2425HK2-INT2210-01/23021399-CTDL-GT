1. Sort the following functions in the ascending order of Big O notation:
O(1)                 (2^10)
O(n)                 (3n+100logn,4n,2^(logn))
O(nlogn)             (4nlogn+2n,nlogn)
O(n^2)               (n^2+10n)
O(n^3)               (n^3)
O(2^n)               (2^n)


2. Given an integer number n, your task is to write two different algorithms in 
pseudo-codes to calculate 2n, and evaluate the complexity of the algorithms.  
-Thu·∫≠t to√°n 1: Nh√¢n tr·ª±c ti·∫øp
M√¥ t·∫£: S·ª≠ d·ª•ng ph√©p nh√¢n tr·ª±c ti·∫øp ƒë·ªÉ t√≠nh 2n.
Gi·∫£ code:

H√†m Multiply(n):
    Tr·∫£ v·ªÅ 2 * n

ƒê·ªô ph·ª©c t·∫°p: O(1)

-Thu·∫≠t to√°n 2: C·ªông li√™n ti·∫øp
M√¥ t·∫£: S·ª≠ d·ª•ng ph√©p c·ªông l·∫∑p l·∫°i ùëõ l·∫ßn ƒë·ªÉ t√≠nh 2n.
Gi·∫£ code:

H√†m Add(n):
    K·∫øt qu·∫£ = 0
    L·∫∑p i t·ª´ 1 ƒë·∫øn n:
        K·∫øt qu·∫£ = K·∫øt qu·∫£ + 2
    Tr·∫£ v·ªÅ K·∫øt qu·∫£

ƒê·ªô ph·ª©c t·∫°p: O(n)



3. Your task is to write operations of queue data structure in pseudo-codes using an 
array, then evaluate the complexities of the operations. 


3.1. Kh·ªüi t·∫°o h√†ng ƒë·ª£i
Gi·∫£ code:

H√†m InitializeQueue(capacity):
    Queue ‚Üê m·∫£ng c√≥ k√≠ch th∆∞·ªõc capacity
    front ‚Üê -1
    rear ‚Üê -1
    Tr·∫£ v·ªÅ Queue

ƒê·ªô ph·ª©c t·∫°p: O(1) (ch·ªâ kh·ªüi t·∫°o bi·∫øn)

3.2. Ki·ªÉm tra h√†ng ƒë·ª£i r·ªóng
Gi·∫£ code:

H√†m IsEmpty():
    N·∫øu front = -1 th√¨ 
        Tr·∫£ v·ªÅ True
    Ng∆∞·ª£c l·∫°i
        Tr·∫£ v·ªÅ False
ƒê·ªô ph·ª©c t·∫°p: O(1) (ch·ªâ ki·ªÉm tra ƒëi·ªÅu ki·ªán)

3.3. Ki·ªÉm tra h√†ng ƒë·ª£i ƒë·∫ßy
Gi·∫£ code:

H√†m IsFull():
    N·∫øu (rear + 1) mod capacity = front th√¨
        Tr·∫£ v·ªÅ True
    Ng∆∞·ª£c l·∫°i
        Tr·∫£ v·ªÅ False

ƒê·ªô ph·ª©c t·∫°p: O(1) (ki·ªÉm tra ƒëi·ªÅu ki·ªán ƒë∆°n gi·∫£n)

3.4. Th√™m ph·∫ßn t·ª≠ v√†o h√†ng ƒë·ª£i (Enqueue)
Gi·∫£ code:

H√†m Enqueue(x):
    N·∫øu IsFull() th√¨
        In "H√†ng ƒë·ª£i ƒë·∫ßy"
        Tr·∫£ v·ªÅ

    N·∫øu IsEmpty() th√¨
        front ‚Üê 0
    rear ‚Üê (rear + 1) mod capacity
    Queue[rear] ‚Üê x
ƒê·ªô ph·ª©c t·∫°p: O(1) (ch·ªâ c·∫ßn g√°n gi√° tr·ªã v√†o m·∫£ng)
3.5. X√≥a ph·∫ßn t·ª≠ kh·ªèi h√†ng ƒë·ª£i (Dequeue)
Gi·∫£ code:

H√†m Dequeue():
    N·∫øu IsEmpty() th√¨
        In "H√†ng ƒë·ª£i r·ªóng"
        Tr·∫£ v·ªÅ

    K·∫øt qu·∫£ ‚Üê Queue[front]

    N·∫øu front = rear th√¨
        front ‚Üê -1
        rear ‚Üê -1  // H√†ng ƒë·ª£i tr·ªëng
    Ng∆∞·ª£c l·∫°i
        front ‚Üê (front + 1) mod capacity

    Tr·∫£ v·ªÅ K·∫øt qu·∫£
ƒê·ªô ph·ª©c t·∫°p: O(1) (ch·ªâ c·∫≠p nh·∫≠t ch·ªâ s·ªë front)

3.6. L·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n (Front)
Gi·∫£ code:

H√†m Front():
    N·∫øu IsEmpty() th√¨
        In "H√†ng ƒë·ª£i r·ªóng"
        Tr·∫£ v·ªÅ
    Tr·∫£ v·ªÅ Queue[front]
ƒê·ªô ph·ª©c t·∫°p: O(1)

3.7. L·∫•y ph·∫ßn t·ª≠ cu·ªëi c√πng (Rear)
Gi·∫£ code:

H√†m Rear():
    N·∫øu IsEmpty() th√¨
        In "H√†ng ƒë·ª£i r·ªóng"
        Tr·∫£ v·ªÅ
    Tr·∫£ v·ªÅ Queue[rear]
ƒê·ªô ph·ª©c t·∫°p: O(1)

4. Your task is to write operations of queue data structure in pseudo-codes using a 
linked list, then evaluate the complexities of the operations. 

4.1. ƒê·ªãnh nghƒ©a n√∫t danh s√°ch li√™n k·∫øt
Gi·∫£ code:

C·∫•u tr√∫c Node:
    data  // Gi√° tr·ªã c·ªßa ph·∫ßn t·ª≠
    next  // Con tr·ªè tr·ªè ƒë·∫øn n√∫t ti·∫øp theo

4.2. Kh·ªüi t·∫°o h√†ng ƒë·ª£i
Gi·∫£ code:

H√†m InitializeQueue():
    front ‚Üê NULL
    rear ‚Üê NULL
ƒê·ªô ph·ª©c t·∫°p:O(1) (ch·ªâ c·∫ßn g√°n con tr·ªè)

4.3. Ki·ªÉm tra h√†ng ƒë·ª£i r·ªóng
Gi·∫£ code:

H√†m IsEmpty():
    N·∫øu front = NULL th√¨
        Tr·∫£ v·ªÅ True
    Ng∆∞·ª£c l·∫°i
        Tr·∫£ v·ªÅ False
ƒê·ªô ph·ª©c t·∫°p: O(1) (ch·ªâ ki·ªÉm tra m·ªôt con tr·ªè)

4.4. Th√™m ph·∫ßn t·ª≠ v√†o h√†ng ƒë·ª£i (Enqueue)
Gi·∫£ code:

H√†m Enqueue(x):
    newNode ‚Üê T·∫°o m·ªôt n√∫t m·ªõi
    newNode.data ‚Üê x
    newNode.next ‚Üê NULL

    N·∫øu IsEmpty() th√¨
        front ‚Üê newNode
        rear ‚Üê newNode
    Ng∆∞·ª£c l·∫°i
        rear.next ‚Üê newNode
        rear ‚Üê newNode
ƒê·ªô ph·ª©c t·∫°p: O(1) (ch·ªâ th√™m m·ªôt n√∫t v√†o cu·ªëi danh s√°ch)

4.5. X√≥a ph·∫ßn t·ª≠ kh·ªèi h√†ng ƒë·ª£i (Dequeue)
Gi·∫£ code:

H√†m Dequeue():
    N·∫øu IsEmpty() th√¨
        In "H√†ng ƒë·ª£i r·ªóng"
        Tr·∫£ v·ªÅ

    K·∫øt qu·∫£ ‚Üê front.data
    front ‚Üê front.next

    N·∫øu front = NULL th√¨
        rear ‚Üê NULL  // H√†ng ƒë·ª£i r·ªóng

    Tr·∫£ v·ªÅ K·∫øt qu·∫£
ƒê·ªô ph·ª©c t·∫°p: O(1) (ch·ªâ c·∫ßn c·∫≠p nh·∫≠t con tr·ªè front)

4.6. L·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n (Front)
Gi·∫£ code:

H√†m Front():
    N·∫øu IsEmpty() th√¨
        In "H√†ng ƒë·ª£i r·ªóng"
        Tr·∫£ v·ªÅ
    Tr·∫£ v·ªÅ front.data
ƒê·ªô ph·ª©c t·∫°p:O(1)

4.7. L·∫•y ph·∫ßn t·ª≠ cu·ªëi c√πng (Rear)
Gi·∫£ code:

H√†m Rear():
    N·∫øu IsEmpty() th√¨
        In "H√†ng ƒë·ª£i r·ªóng"
        Tr·∫£ v·ªÅ
    Tr·∫£ v·ªÅ rear.data
ƒê·ªô ph·ª©c t·∫°p: O(1)

5. Your task is to write operations of stack data structure in pseudo-codes using an 
array, then evaluate the complexities of the operations. 


5.1. Kh·ªüi t·∫°o ngƒÉn x·∫øp
Gi·∫£ code:

H√†m InitializeStack(capacity):
    Stack ‚Üê m·∫£ng c√≥ k√≠ch th∆∞·ªõc capacity
    top ‚Üê -1
    Tr·∫£ v·ªÅ Stack
ƒê·ªô ph·ª©c t·∫°p:O(1) (kh·ªüi t·∫°o bi·∫øn)

5.2. Ki·ªÉm tra ngƒÉn x·∫øp r·ªóng
Gi·∫£ code:

H√†m IsEmpty():
    N·∫øu top = -1 th√¨
        Tr·∫£ v·ªÅ True
    Ng∆∞·ª£c l·∫°i
        Tr·∫£ v·ªÅ False
ƒê·ªô ph·ª©c t·∫°p: O(1) (ch·ªâ ki·ªÉm tra m·ªôt bi·∫øn)

5.3. Ki·ªÉm tra ngƒÉn x·∫øp ƒë·∫ßy
Gi·∫£ code:

H√†m IsFull():
    N·∫øu top = capacity - 1 th√¨
        Tr·∫£ v·ªÅ True
    Ng∆∞·ª£c l·∫°i
        Tr·∫£ v·ªÅ False
ƒê·ªô ph·ª©c t·∫°p:O(1) (ch·ªâ ki·ªÉm tra m·ªôt bi·∫øn)

5.4. Th√™m ph·∫ßn t·ª≠ v√†o ngƒÉn x·∫øp (Push)
Gi·∫£ code:

H√†m Push(x):
    N·∫øu IsFull() th√¨
        In "NgƒÉn x·∫øp ƒë·∫ßy"
        Tr·∫£ v·ªÅ

    top ‚Üê top + 1
    Stack[top] ‚Üê x
ƒê·ªô ph·ª©c t·∫°p: O(1) (ch·ªâ c·∫≠p nh·∫≠t ch·ªâ s·ªë v√† g√°n gi√° tr·ªã)

5.5. X√≥a ph·∫ßn t·ª≠ kh·ªèi ngƒÉn x·∫øp (Pop)
Gi·∫£ code:

H√†m Pop():
    N·∫øu IsEmpty() th√¨
        In "NgƒÉn x·∫øp r·ªóng"
        Tr·∫£ v·ªÅ

    K·∫øt qu·∫£ ‚Üê Stack[top]
    top ‚Üê top - 1
    Tr·∫£ v·ªÅ K·∫øt qu·∫£
ƒê·ªô ph·ª©c t·∫°p: O(1) (ch·ªâ c·∫≠p nh·∫≠t ch·ªâ s·ªë)

5.6. L·∫•y ph·∫ßn t·ª≠ tr√™n c√πng (Top/Peek)
Gi·∫£ code:

H√†m Peek():
    N·∫øu IsEmpty() th√¨
        In "NgƒÉn x·∫øp r·ªóng"
        Tr·∫£ v·ªÅ
    Tr·∫£ v·ªÅ Stack[top]
ƒê·ªô ph·ª©c t·∫°p:O(1)

6. Your task is to write operations of stack data structure in pseudo-codes using a 
linked list, then evaluate the complexities of the operations.

6.1. ƒê·ªãnh nghƒ©a n√∫t danh s√°ch li√™n k·∫øt
Gi·∫£ code:

C·∫•u tr√∫c Node:
    data  // Gi√° tr·ªã c·ªßa ph·∫ßn t·ª≠
    next  // Con tr·ªè tr·ªè ƒë·∫øn n√∫t ti·∫øp theo

6.2. Kh·ªüi t·∫°o ngƒÉn x·∫øp
Gi·∫£ code:

H√†m InitializeStack():
    top ‚Üê NULL
ƒê·ªô ph·ª©c t·∫°p: O(1) (ch·ªâ c·∫ßn g√°n con tr·ªè)

6.3. Ki·ªÉm tra ngƒÉn x·∫øp r·ªóng
Gi·∫£ code:

H√†m IsEmpty():
    N·∫øu top = NULL th√¨
        Tr·∫£ v·ªÅ True
    Ng∆∞·ª£c l·∫°i
        Tr·∫£ v·ªÅ False
ƒê·ªô ph·ª©c t·∫°p: O(1) (ch·ªâ ki·ªÉm tra m·ªôt con tr·ªè)

6.4. Th√™m ph·∫ßn t·ª≠ v√†o ngƒÉn x·∫øp (Push)
M√¥ t·∫£:
T·∫°o m·ªôt n√∫t m·ªõi.
ƒê·∫∑t next c·ªßa n√∫t m·ªõi tr·ªè ƒë·∫øn n√∫t hi·ªán t·∫°i ·ªü top.
C·∫≠p nh·∫≠t top ƒë·ªÉ tr·ªè ƒë·∫øn n√∫t m·ªõi.

H√†m Push(x):
    newNode ‚Üê T·∫°o m·ªôt n√∫t m·ªõi
    newNode.data ‚Üê x
    newNode.next ‚Üê top
    top ‚Üê newNode
ƒê·ªô ph·ª©c t·∫°p: O(1) (ch·ªâ c·∫≠p nh·∫≠t con tr·ªè)

6.5. X√≥a ph·∫ßn t·ª≠ kh·ªèi ngƒÉn x·∫øp (Pop)
M√¥ t·∫£:
L·∫•y gi√° tr·ªã c·ªßa n√∫t top.
C·∫≠p nh·∫≠t top ƒë·ªÉ tr·ªè ƒë·∫øn ph·∫ßn t·ª≠ ti·∫øp theo.
Gi·∫£i ph√≥ng b·ªô nh·ªõ c·ªßa n√∫t c≈©.
Gi·∫£ code:

H√†m Pop():
    N·∫øu IsEmpty() th√¨
        In "NgƒÉn x·∫øp r·ªóng"
        Tr·∫£ v·ªÅ

    K·∫øt qu·∫£ ‚Üê top.data
    top ‚Üê top.next
    Tr·∫£ v·ªÅ K·∫øt qu·∫£
ƒê·ªô ph·ª©c t·∫°pO(1) (ch·ªâ c·∫≠p nh·∫≠t con tr·ªè)

6.6. L·∫•y ph·∫ßn t·ª≠ tr√™n c√πng (Top/Peek)
Gi·∫£ code:

H√†m Peek():
    N·∫øu IsEmpty() th√¨
        In "NgƒÉn x·∫øp r·ªóng"
        Tr·∫£ v·ªÅ
    Tr·∫£ v·ªÅ top.data
ƒê·ªô ph·ª©c t·∫°p: O(1)